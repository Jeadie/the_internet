import os


"""
Django settings for the_internet project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


## Default maximum security
DEBUG=False
ALLOWED_HOSTS = []

STAGE = os.environ.get("STAGE", "base")
if STAGE == "production":
    from the_internet.production_settings import *
elif STAGE == "local":
    from the_internet.local_settings import *


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    "django.contrib.auth",
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "rest_framework",
    "django_celery_beat",

    'the_people.apps.ThePeopleConfig',
    'the_news.apps.TheNewsConfig'
]

MIDDLEWARE = [
    'the_internet.middleware.HealthCheckMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'the_internet.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": [BASE_DIR / "the_internet", BASE_DIR / "the_news", BASE_DIR / "the_people" ] ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ]
}

WSGI_APPLICATION = 'the_internet.wsgi.application'
AUTH_USER_MODEL = 'the_people.User'

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


if USE_TZ:
    # https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-timezone
    CELERY_TIMEZONE = TIME_ZONE

# See https://docs.celeryq.dev/en/stable/userguide/configuration.html
# #std:setting-broker_url
CELERY_BROKER_URL = "amqp://guest@localhost//" #'redis://localhost:6379/0'
# #std:setting-result_backend
# CELERY_RESULT_BACKEND = CELERY_BROKER_URL
# #std:setting-accept_content
CELERY_ACCEPT_CONTENT = ["json"]
# #std:setting-task_serializer
CELERY_TASK_SERIALIZER = "json"
# #std:setting-result_serializer
CELERY_RESULT_SERIALIZER = "json"
# #task-time-limit
CELERY_TASK_TIME_LIMIT = 5 * 60 # in seconds
# #task-soft-time-limit 
CELERY_TASK_SOFT_TIME_LIMIT = 60 # in seconds
# #beat-scheduler
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

CELERY_IMPORTS=("the_internet", )


HEALTH_CHECK_PATH_INFO = "/ping/"
HEALTH_CHECK_HEALTHY_RESPONSE = "pong!"
